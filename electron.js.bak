
import electronModule, * as electronNS from 'electron';
const electron = electronModule.app ? electronModule : electronNS;
const { app, BrowserWindow, ipcMain } = electron;
import path from 'path';
import fs from 'fs';

// __dirname Ersatz fÃ¼r ES Modules
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function createWindow() {
  const win = new BrowserWindow({
    width: 1000,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: false,
      contextIsolation: true,
    },
    icon: path.join(__dirname, 'public', 'ccs.png'),
  });
  win.loadFile('index.html');
}

app.whenReady().then(() => {
  createWindow();
  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit();
});

// IPC for reading/writing inventory files

const getAppDataPath = () => {
  return path.join(
    process.env.APPDATA || process.env.HOME || process.env.USERPROFILE,
    'local',
    'ccs-books'
  );
};


ipcMain.handle('read-inventory', async (event, filename) => {
  const dir = getAppDataPath();
  const file = path.join(dir, filename);
  try {
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    if (!fs.existsSync(file)) return '{}';
    return fs.readFileSync(file, 'utf-8');
  } catch (e) {
    return '{}';
  }
});


ipcMain.handle('write-inventory', async (event, filename, data) => {
  const dir = getAppDataPath();
  const file = path.join(dir, filename);
  try {
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    fs.writeFileSync(file, data, 'utf-8');
    return true;
  } catch (e) {
    return false;
  }
});
